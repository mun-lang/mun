---
source: crates/mun_hir/src/ty/tests.rs
expression: "fn foo():int {\n    break; // error: not in a loop\n    loop { break 3; break 3.0; } // error: mismatched type\n    let a:int = loop { break 3.0; } // error: mismatched type\n    loop { break 3; }\n    let a:int = loop { break loop { break 3; } }\n    loop { break loop { break 3.0; } } // error: mismatched type\n}"
---
[19; 24): `break` outside of a loop
[70; 79): mismatched type
[132; 141): mismatched type
[266; 275): mismatched type
[13; 308) '{     ...type }': never
[19; 24) 'break': never
[54; 82) 'loop {...3.0; }': int
[59; 82) '{ brea...3.0; }': never
[61; 68) 'break 3': never
[67; 68) '3': int
[70; 79) 'break 3.0': never
[76; 79) '3.0': float
[117; 118) 'a': int
[125; 144) 'loop {...3.0; }': int
[130; 144) '{ break 3.0; }': never
[132; 141) 'break 3.0': never
[138; 141) '3.0': float
[175; 192) 'loop {...k 3; }': int
[180; 192) '{ break 3; }': never
[182; 189) 'break 3': never
[188; 189) '3': int
[201; 202) 'a': int
[209; 241) 'loop {...3; } }': int
[214; 241) '{ brea...3; } }': never
[216; 239) 'break ...k 3; }': never
[222; 239) 'loop {...k 3; }': int
[227; 239) '{ break 3; }': never
[229; 236) 'break 3': never
[235; 236) '3': int
[246; 280) 'loop {...0; } }': int
[251; 280) '{ brea...0; } }': never
[253; 278) 'break ...3.0; }': never
[259; 278) 'loop {...3.0; }': int
[264; 278) '{ break 3.0; }': never
[266; 275) 'break 3.0': never
[272; 275) '3.0': float
