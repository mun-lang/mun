---
source: crates/mun_codegen/src/test.rs
assertion_line: 1045
expression: "\n    fn add_impl(a:i32, b:i32) -> i32 {\n        a+b\n    }\n\n    fn add(a:i32, b:i32) -> i32 {\n      add_impl(a,b)\n    }\n\n    pub fn test() -> i32 {\n      add(4,5)\n      add_impl(4,5)\n      add(4,5)\n    }\n    "
---
; == FILE IR (mod) =====================================
; ModuleID = 'mod'
source_filename = "mod"

@global_type_lookup_table = external global [1 x i64*]

define i32 @add_impl(i32 %0, i32 %1) {
body:
  %add = add i32 %0, %1
  ret i32 %add
}

define i32 @add(i32 %0, i32 %1) {
body:
  %add_impl = call i32 @add_impl(i32 %0, i32 %1)
  ret i32 %add_impl
}

define i32 @test() {
body:
  %add = call i32 @add(i32 4, i32 5)
  %add_impl = call i32 @add_impl(i32 4, i32 5)
  %add1 = call i32 @add(i32 4, i32 5)
  ret i32 %add1
}

; == GROUP IR (mod) ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

@global_type_lookup_table = global [1 x i64*] zeroinitializer

