---
source: crates/mun_codegen/src/test.rs
expression: "fn fibonacci(n:int):int {\n    if n <= 1 {\n        n\n    } else {\n        fibonacci(n-1) + fibonacci(n-2)\n    }\n}"
---
; ModuleID = 'main.mun'
source_filename = "main.mun"

%DispatchTable = type { i64 (i64)* }

@dispatchTable = global %DispatchTable { i64 (i64)* @fibonacci }

define i64 @fibonacci(i64 %n) {
body:
  %lesseq = icmp sle i64 %n, 1
  br i1 %lesseq, label %if_merge, label %else

else:                                             ; preds = %body
  %sub = sub i64 %n, 1
  %fibonacci_ptr = load i64 (i64)*, i64 (i64)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 0)
  %fibonacci = call i64 %fibonacci_ptr(i64 %sub)
  %sub1 = sub i64 %n, 2
  %fibonacci_ptr2 = load i64 (i64)*, i64 (i64)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 0)
  %fibonacci3 = call i64 %fibonacci_ptr2(i64 %sub1)
  %add = add i64 %fibonacci, %fibonacci3
  br label %if_merge

if_merge:                                         ; preds = %body, %else
  %iftmp = phi i64 [ %add, %else ], [ %n, %body ]
  ret i64 %iftmp
}

