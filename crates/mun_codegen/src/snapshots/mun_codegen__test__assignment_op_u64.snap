---
source: crates/mun_codegen/src/test.rs
assertion_line: 1045
expression: "\n    pub fn assign(a: u64, b: u64) -> u64 {\n        a = b;\n        a\n    }\n    pub fn assign_add(a: u64, b: u64) -> u64 {\n        a += b;\n        a\n    }\n    pub fn assign_subtract(a: u64, b: u64) -> u64 {\n        a -= b;\n        a\n    }\n    pub fn assign_multiply(a: u64, b: u64) -> u64 {\n        a *= b;\n        a\n    }\n    pub fn assign_divide(a: u64, b: u64) -> u64 {\n        a /= b;\n        a\n    }\n    pub fn assign_remainder(a: u64, b: u64) -> u64 {\n        a %= b;\n        a\n    }\n                        "
---
; == FILE IR (mod) =====================================
; ModuleID = 'mod'
source_filename = "mod"

@global_type_lookup_table = external global [18 x i64*]

define i64 @assign(i64 %0, i64 %1) {
body:
  ret i64 %1
}

define i64 @assign_add(i64 %0, i64 %1) {
body:
  %add = add i64 %0, %1
  ret i64 %add
}

define i64 @assign_subtract(i64 %0, i64 %1) {
body:
  %sub = sub i64 %0, %1
  ret i64 %sub
}

define i64 @assign_multiply(i64 %0, i64 %1) {
body:
  %mul = mul i64 %0, %1
  ret i64 %mul
}

define i64 @assign_divide(i64 %0, i64 %1) {
body:
  %div = udiv i64 %0, %1
  ret i64 %div
}

define i64 @assign_remainder(i64 %0, i64 %1) {
body:
  %rem = urem i64 %0, %1
  ret i64 %rem
}

; == GROUP IR (mod) ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

@global_type_lookup_table = global [18 x i64*] zeroinitializer

