---
source: crates/mun_codegen/src/test.rs
expression: "\n    pub fn assign(a: f32, b: f32) -> f32 {\n        a = b;\n        a\n    }\n    pub fn assign_add(a: f32, b: f32) -> f32 {\n        a += b;\n        a\n    }\n    pub fn assign_subtract(a: f32, b: f32) -> f32 {\n        a -= b;\n        a\n    }\n    pub fn assign_multiply(a: f32, b: f32) -> f32 {\n        a *= b;\n        a\n    }\n    pub fn assign_divide(a: f32, b: f32) -> f32 {\n        a /= b;\n        a\n    }\n    pub fn assign_remainder(a: f32, b: f32) -> f32 {\n        a %= b;\n        a\n    }\n                        "
---
; == FILE IR (mod) =====================================
; ModuleID = 'mod'
source_filename = "mod"

@global_type_lookup_table = external global [1 x i64*]

define float @assign(float %0, float %1) {
body:
  ret float %1
}

define float @assign_add(float %0, float %1) {
body:
  %add = fadd float %0, %1
  ret float %add
}

define float @assign_subtract(float %0, float %1) {
body:
  %sub = fsub float %0, %1
  ret float %sub
}

define float @assign_multiply(float %0, float %1) {
body:
  %mul = fmul float %0, %1
  ret float %mul
}

define float @assign_divide(float %0, float %1) {
body:
  %div = fdiv float %0, %1
  ret float %div
}

define float @assign_remainder(float %0, float %1) {
body:
  %rem = frem float %0, %1
  ret float %rem
}

; == GROUP IR (mod) ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

@global_type_lookup_table = global [1 x i64*] zeroinitializer

