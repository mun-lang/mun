---
source: crates/mun_codegen/src/test.rs
assertion_line: 1045
expression: "\n    pub fn assign(a: f64, b: f64) -> f64 {\n        a = b;\n        a\n    }\n    pub fn assign_add(a: f64, b: f64) -> f64 {\n        a += b;\n        a\n    }\n    pub fn assign_subtract(a: f64, b: f64) -> f64 {\n        a -= b;\n        a\n    }\n    pub fn assign_multiply(a: f64, b: f64) -> f64 {\n        a *= b;\n        a\n    }\n    pub fn assign_divide(a: f64, b: f64) -> f64 {\n        a /= b;\n        a\n    }\n    pub fn assign_remainder(a: f64, b: f64) -> f64 {\n        a %= b;\n        a\n    }\n                        "
---
; == FILE IR (mod) =====================================
; ModuleID = 'mod'
source_filename = "mod"

@global_type_lookup_table = external global [18 x i64*]

define double @assign(double %0, double %1) {
body:
  ret double %1
}

define double @assign_add(double %0, double %1) {
body:
  %add = fadd double %0, %1
  ret double %add
}

define double @assign_subtract(double %0, double %1) {
body:
  %sub = fsub double %0, %1
  ret double %sub
}

define double @assign_multiply(double %0, double %1) {
body:
  %mul = fmul double %0, %1
  ret double %mul
}

define double @assign_divide(double %0, double %1) {
body:
  %div = fdiv double %0, %1
  ret double %div
}

define double @assign_remainder(double %0, double %1) {
body:
  %rem = frem double %0, %1
  ret double %rem
}

; == GROUP IR (mod) ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

@global_type_lookup_table = global [18 x i64*] zeroinitializer

