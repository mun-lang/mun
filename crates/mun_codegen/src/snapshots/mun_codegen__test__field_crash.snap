---
source: crates/mun_codegen/src/test.rs
expression: "\n    struct(gc) Foo { a: i32 };\n\n    pub fn main(c:i32) -> i32 {\n        let b = Foo { a: c + 5 }\n        b.a\n    }\n    "
---
; == FILE IR (mod) =====================================
; ModuleID = 'mod'
source_filename = "mod"

%DispatchTable = type { i8** (i8*, i8*)* }
%Foo = type { i32 }

@allocatorHandle = external global i8*
@dispatchTable = external global %DispatchTable
@global_type_lookup_table = external global [2 x i64*]

define i32 @main(i32 %0) {
body:
  %b = alloca %Foo**, align 8
  %c = alloca i32, align 4
  store i32 %0, i32* %c, align 4
  %c1 = load i32, i32* %c, align 4
  %add = add i32 %c1, 5
  %init = insertvalue %Foo undef, i32 %add, 0
  %new_ptr = load i8** (i8*, i8*)*, i8** (i8*, i8*)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 0), align 8
  %Foo_ptr = load i64*, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @global_type_lookup_table, i64 0, i64 0), align 8
  %type_info_ptr_to_i8_ptr = bitcast i64* %Foo_ptr to i8*
  %allocator_handle = load i8*, i8** @allocatorHandle, align 8
  %new = call i8** %new_ptr(i8* %type_info_ptr_to_i8_ptr, i8* %allocator_handle)
  %Foo_ptr_ptr = bitcast i8** %new to %Foo**
  %Foo_mem_ptr = load %Foo*, %Foo** %Foo_ptr_ptr, align 8
  store %Foo %init, %Foo* %Foo_mem_ptr, align 4
  store %Foo** %Foo_ptr_ptr, %Foo*** %b, align 8
  %mem_ptr = load %Foo**, %Foo*** %b, align 8
  %deref = load %Foo*, %Foo** %mem_ptr, align 8
  %Foo.a_ptr = getelementptr inbounds %Foo, %Foo* %deref, i32 0, i32 0
  %Foo.a = load i32, i32* %Foo.a_ptr, align 4
  ret i32 %Foo.a
}

; == GROUP IR (mod) ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%DispatchTable = type { i8** (i8*, i8*)* }

@dispatchTable = global %DispatchTable zeroinitializer
@global_type_lookup_table = global [2 x i64*] zeroinitializer
@allocatorHandle = unnamed_addr global i8* null

