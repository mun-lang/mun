name: CI

on:
  pull_request:
  push:
    branches:
      - main
      - release/*

env:
  RUSTFLAGS: -Dwarnings

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - uses: Swatinem/rust-cache@v1

      - name: Cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-targets

  test:
    name: Test Mun
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macOS-latest"]
        include:
          - RUSTFLAGS: "-Dwarnings"
          - os: "windows-latest"
            RUSTFLAGS: "-Dwarnings -Ctarget-feature=+crt-static"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: rustfmt

      - uses: Swatinem/rust-cache@v1
        
      - name: Cargo test
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: ${{ matrix.RUSTFLAGS }}
        with:
          command: test
          args: --workspace -- --nocapture

  test-dependents:
    name: Test Mun Dependents (C++ & book)
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macOS-latest"]
        include:
          - RUSTFLAGS: "-Dwarnings"
          - os: "windows-latest"
            RUSTFLAGS: "-Dwarnings -Ctarget-feature=+crt-static"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: rustfmt

      - uses: Swatinem/rust-cache@v1

      - name: Cargo build
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: ${{ matrix.RUSTFLAGS }}
        with:
          command: build
          args: --workspace
          
      - name: Create build folder (debug)
        run: cmake -E make_directory ${{ runner.workspace }}/build/debug
        
      - name: Create build folder (release)
        run: cmake -E make_directory ${{ runner.workspace }}/build/release

      - name: Configure cmake (debug)
        working-directory: ${{ runner.workspace }}/build/debug
        run: cmake -DCMAKE_BUILD_TYPE=Debug -S ${{ github.workspace }} -Dmun_build_examples=ON -Dmun_build_tests=ON -Dmun_binaries_path=${{ github.workspace }}/target/debug/ -Dmun_examples_path=${{ github.workspace }}/examples
      
      - name: Configure cmake (release)
        working-directory: ${{ runner.workspace }}/build/release
        run: cmake -DCMAKE_BUILD_TYPE=Release -S ${{ github.workspace }} -Dmun_build_examples=ON -Dmun_build_tests=ON -Dmun_binaries_path=${{ github.workspace }}/target/debug/ -Dmun_examples_path=${{ github.workspace }}/examples

      - name: Build C++ (debug)
        working-directory: ${{ runner.workspace }}/build/debug
        run: cmake --build . --config Debug
        
      - name: Build C++ (release)
        working-directory: ${{ runner.workspace }}/build/release
        run: cmake --build . --config Release

      - name: Test C++ (debug)
        working-directory: ${{ runner.workspace }}/build/debug
        run: ctest -C Debug
        
      - name: Test C++ (release)
        working-directory: ${{ runner.workspace }}/build/release
        run: ctest -C Release

      - name: Install mdbook
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions-rs/install@v0.1
        with:
          crate: mdbook
          version: 0.4.7
          use-tool-cache: true

      - name: mdbook test
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: mdbook test book -L target/debug/deps

      - name: mdbook build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: mdbook build book

  style:
    name: Check Style
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: clippy, rustfmt

      - uses: Swatinem/rust-cache@v1

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  tarpaulin:
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: rustfmt

      - uses: Swatinem/rust-cache@v1

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1

      - uses: codecov/codecov-action@v3
        with:
          file: ${{ steps.coverage.outputs.report }}
          name: ${{ matrix.os }}
