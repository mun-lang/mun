name: CI

on: [pull_request, push]

env:
  RUSTFLAGS: -Dwarnings

jobs:

  malloc:
    name: Malloc
    runs-on: "windows-2016"
    steps:
      - name: Set LIB environment variable (Windows-only)
        if: runner.os == 'Windows'
        run: |
          @echo off

          :GetWin10SdkDir

          call :GetWin10SdkDirHelper HKLM\SOFTWARE\Wow6432Node > nul 2>&1
          if errorlevel 1 call :GetWin10SdkDirHelper HKCU\SOFTWARE\Wow6432Node > nul 2>&1
          if errorlevel 1 call :GetWin10SdkDirHelper HKLM\SOFTWARE > nul 2>&1
          if errorlevel 1 call :GetWin10SdkDirHelper HKCU\SOFTWARE > nul 2>&1
          if errorlevel 1 exit /B 1

          @REM `get windows 10 sdk version number`\
          setlocal enableDelayedExpansion

          @REM `Due to the SDK installer changes beginning with the 10.0.15063.0 (RS2 SDK), there is a chance that the
          @REM Windows SDK installed may not have the full set of bits required for all application scenarios.
          @REM We check for the existence of a file we know to be included in the "App" and "Desktop" portions
          @REM of the Windows SDK, depending on the Developer Command Prompt's -app_platform configuration.
          @REM If "windows.h" (UWP) or "winsdkver.h" (Desktop) are not found, the directory will be skipped as
          @REM a candidate default value for [WindowsSdkDir].`
          set __check_file=winsdkver.h
          if /I "%VSCMD_ARG_APP_PLAT%"=="UWP" set __check_file=Windows.h

          if not "%WindowsSdkDir%"=="" for /f %%i IN ('dir "%WindowsSdkDir%include\" /b /ad-h /on') DO (
              @REM `Skip if Windows.h|winsdkver (based upon -app_platform configuration) is not found in %%i\um.`
              if EXIST "%WindowsSdkDir%include\%%i\um\%__check_file%" (
                  set result=%%i
                  if "!result:~0,3!"=="10." (
                      set SDK=!result!
                      if "!result!"=="%VSCMD_ARG_WINSDK%" set findSDK=1
                  )
              )
          )

          @REM Set the LIB environment variable to the Windows SDK
          setx LIB "%WindowsSdkDir%Lib\%result%\ucrt\x64"
          cd %LIB%
          dir

          exit /B 0

          :GetWin10SdkDirHelper

          @REM `Get Windows 10 SDK installed folder`
          for /F "tokens=1,2*" %%i in ('reg query "%1\Microsoft\Microsoft SDKs\Windows\v10.0" /v "InstallationFolder"') DO (
              if "%%i"=="InstallationFolder" (
                  SET WindowsSdkDir=%%~k
              )
          )
        shell: cmd

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test
    runs-on: ${{ matrix.config.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: "ubuntu-latest", toolchain: "stable"}
        - { os: "ubuntu-latest", toolchain: "beta"}
        - { os: "ubuntu-latest", toolchain: "nightly"}
        - { os: "windows-2016", toolchain: "stable"}
        - { os: "macOS-latest", toolchain: "stable"}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Install ${{ matrix.config.toolchain }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.config.toolchain }}
          override: true
          components: rustfmt

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Set LIB environment variable (Windows-only)
        if: runner.os == 'Windows'
        run: |
          @echo off

          :GetWin10SdkDir

          call :GetWin10SdkDirHelper HKLM\SOFTWARE\Wow6432Node > nul 2>&1
          if errorlevel 1 call :GetWin10SdkDirHelper HKCU\SOFTWARE\Wow6432Node > nul 2>&1
          if errorlevel 1 call :GetWin10SdkDirHelper HKLM\SOFTWARE > nul 2>&1
          if errorlevel 1 call :GetWin10SdkDirHelper HKCU\SOFTWARE > nul 2>&1
          if errorlevel 1 exit /B 1

          @REM `get windows 10 sdk version number`\
          setlocal enableDelayedExpansion

          @REM `Due to the SDK installer changes beginning with the 10.0.15063.0 (RS2 SDK), there is a chance that the
          @REM Windows SDK installed may not have the full set of bits required for all application scenarios.
          @REM We check for the existence of a file we know to be included in the "App" and "Desktop" portions
          @REM of the Windows SDK, depending on the Developer Command Prompt's -app_platform configuration.
          @REM If "windows.h" (UWP) or "winsdkver.h" (Desktop) are not found, the directory will be skipped as
          @REM a candidate default value for [WindowsSdkDir].`
          set __check_file=winsdkver.h
          if /I "%VSCMD_ARG_APP_PLAT%"=="UWP" set __check_file=Windows.h

          if not "%WindowsSdkDir%"=="" for /f %%i IN ('dir "%WindowsSdkDir%include\" /b /ad-h /on') DO (
              @REM `Skip if Windows.h|winsdkver (based upon -app_platform configuration) is not found in %%i\um.`
              if EXIST "%WindowsSdkDir%include\%%i\um\%__check_file%" (
                  set result=%%i
                  if "!result:~0,3!"=="10." (
                      set SDK=!result!
                      if "!result!"=="%VSCMD_ARG_WINSDK%" set findSDK=1
                  )
              )
          )

          @REM Set the LIB environment variable to the Windows SDK
          setx LIB "%WindowsSdkDir%Lib\%result%\ucrt\x64"

          exit /B 0

          :GetWin10SdkDirHelper

          @REM `Get Windows 10 SDK installed folder`
          for /F "tokens=1,2*" %%i in ('reg query "%1\Microsoft\Microsoft SDKs\Windows\v10.0" /v "InstallationFolder"') DO (
              if "%%i"=="InstallationFolder" (
                  SET WindowsSdkDir=%%~k
              )
          )
        shell: cmd

      - name: Cargo check
        uses: actions-rs/cargo@v1
        continue-on-error: ${{ matrix.config.toolchain == 'nightly' }}
        with:
          command: test

  style:
    name: Check Style
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy, rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  grcov:
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-2016

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Set LIB environment variable (Windows-only)
        if: runner.os == 'Windows'
        run: |
          @echo off

          :GetWin10SdkDir

          call :GetWin10SdkDirHelper HKLM\SOFTWARE\Wow6432Node > nul 2>&1
          if errorlevel 1 call :GetWin10SdkDirHelper HKCU\SOFTWARE\Wow6432Node > nul 2>&1
          if errorlevel 1 call :GetWin10SdkDirHelper HKLM\SOFTWARE > nul 2>&1
          if errorlevel 1 call :GetWin10SdkDirHelper HKCU\SOFTWARE > nul 2>&1
          if errorlevel 1 exit /B 1

          @REM `get windows 10 sdk version number`\
          setlocal enableDelayedExpansion

          @REM `Due to the SDK installer changes beginning with the 10.0.15063.0 (RS2 SDK), there is a chance that the
          @REM Windows SDK installed may not have the full set of bits required for all application scenarios.
          @REM We check for the existence of a file we know to be included in the "App" and "Desktop" portions
          @REM of the Windows SDK, depending on the Developer Command Prompt's -app_platform configuration.
          @REM If "windows.h" (UWP) or "winsdkver.h" (Desktop) are not found, the directory will be skipped as
          @REM a candidate default value for [WindowsSdkDir].`
          set __check_file=winsdkver.h
          if /I "%VSCMD_ARG_APP_PLAT%"=="UWP" set __check_file=Windows.h

          if not "%WindowsSdkDir%"=="" for /f %%i IN ('dir "%WindowsSdkDir%include\" /b /ad-h /on') DO (
              @REM `Skip if Windows.h|winsdkver (based upon -app_platform configuration) is not found in %%i\um.`
              if EXIST "%WindowsSdkDir%include\%%i\um\%__check_file%" (
                  set result=%%i
                  if "!result:~0,3!"=="10." (
                      set SDK=!result!
                      if "!result!"=="%VSCMD_ARG_WINSDK%" set findSDK=1
                  )
              )
          )

          @REM Set the LIB environment variable to the Windows SDK
          setx LIB "%WindowsSdkDir%Lib\%result%\ucrt\x64"

          exit /B 0

          :GetWin10SdkDirHelper

          @REM `Get Windows 10 SDK installed folder`
          for /F "tokens=1,2*" %%i in ('reg query "%1\Microsoft\Microsoft SDKs\Windows\v10.0" /v "InstallationFolder"') DO (
              if "%%i"=="InstallationFolder" (
                  SET WindowsSdkDir=%%~k
              )
          )
        shell: cmd

      - name: Execute tests
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: test
          args: --all
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"

      - name: Gather coverage data
        id: coverage
        uses: actions-rs/grcov@v0.1

      - uses: codecov/codecov-action@v1
        with:
          token: 9664cbca-39d7-4c44-931a-064d2e75f80b # Not secure, have to wait for this issue: https://github.com/codecov/codecov-action/issues/29
          file: ${{ steps.coverage.outputs.report }}
  
  artifacts:
    name: Artifacts
    runs-on: ${{ matrix.config.os }}
    needs: [test, style]
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
          os: "ubuntu-latest",
          dir: linux64,
          artifacts: "mun libmun_runtime.so"
        }
        - {
          os: "windows-2016",
          dir: win64,
          artifacts: "mun.exe mun_runtime.dll mun_runtime.dll.lib"
        }
        - {
          os: "macOS-latest",
          dir: osx64,
          artifacts: "mun libmun_runtime.dylib"
        }
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Install ${{ matrix.config.toolchain }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - run: mkdir -p ${{ matrix.config.dir }}

      - name: Move artifacts
        env:
          ARTIFACTS: ${{ matrix.config.artifacts }}
          OUT_DIR: ${{ matrix.config.dir }}
        run: |
          import os
          artifacts = os.environ['ARTIFACTS'].split()
          for artifact in artifacts:
            src = "target/release/%s" % artifact
            dst = os.environ['OUT_DIR'] + "/" + artifact
            os.rename(src, dst)
        shell: python

      - name: Shorten commit SHA
        run: |
          import os
          print("::set-env name=COMMIT_SHA::%s" % os.environ['GITHUB_SHA'][:7])
        shell: python

      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.config.dir }}-${{ env['COMMIT_SHA'] }}
          path: ${{ matrix.config.dir }}
